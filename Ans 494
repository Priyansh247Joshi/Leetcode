class Solution {
public:
    int countofSubset(vector<int>& nums,int s1,int counter)
    {
        int n=nums.size();
        int dp[n+1][s1+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=s1;j++)
            {
                if(i==0)
                    dp[i][j]=0;
                if(j==0)
                    dp[i][j]=1;
            }
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=s1;j++)
            {
                if(nums[i-1]==0)
                    dp[i][j] = dp[i-1][j];
                
                else if(nums[i-1] <= j)
                    dp[i][j]=(dp[i-1][j-nums[i-1]])+(dp[i-1][j]);
                
                else
                    dp[i][j]=dp[i-1][j];
            }
        }
        return pow(2,counter)*dp[n][s1];
    }
    int findTargetSumWays(vector<int>& nums, int S) 
    {
        int n=nums.size();
        int sum=0;
        int counter=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            if(nums[i]==0)
                counter++;
        }
        if(S > sum)
            return 0;
        if((S+sum)%2!=0)
            return 0;
        int s1=(sum+S)/2;
        return countofSubset(nums,s1,counter);
    }
};
